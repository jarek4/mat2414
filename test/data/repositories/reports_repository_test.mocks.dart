// Mocks generated by Mockito 5.4.0 from annotations
// in mat2414/test/data/repositories/reports_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mat2414/src/data/models/models.dart' as _i4;
import 'package:mat2414/src/domain/local_database/i_report_db_helper.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IReportDbHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIReportDbHelper extends _i1.Mock implements _i2.IReportDbHelper {
  @override
  _i3.Future<int> add(_i4.Report? item) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [item],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<List<_i4.Report>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Report>>.value(<_i4.Report>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Report>>.value(<_i4.Report>[]),
      ) as _i3.Future<List<_i4.Report>>);
  @override
  _i3.Future<_i4.Report?> getClosedForAMonth(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getClosedForAMonth,
          [
            year,
            month,
          ],
        ),
        returnValue: _i3.Future<_i4.Report?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Report?>.value(),
      ) as _i3.Future<_i4.Report?>);
  @override
  _i3.Future<List<_i4.Report>> getForServiceYear(String? serviceYear) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForServiceYear,
          [serviceYear],
        ),
        returnValue: _i3.Future<List<_i4.Report>>.value(<_i4.Report>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Report>>.value(<_i4.Report>[]),
      ) as _i3.Future<List<_i4.Report>>);
  @override
  _i3.Future<_i4.Report?> getSingle(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getSingle,
          [id],
        ),
        returnValue: _i3.Future<_i4.Report?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Report?>.value(),
      ) as _i3.Future<_i4.Report?>);
  @override
  _i3.Future<int> update(_i4.Report? item) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [item],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
