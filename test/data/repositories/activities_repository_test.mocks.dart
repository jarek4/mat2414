// Mocks generated by Mockito 5.4.0 from annotations
// in mat2414/test/data/repositories/activities_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mat2414/src/data/models/models.dart' as _i4;
import 'package:mat2414/src/domain/local_database/i_activity_db_helper.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IActivityDbHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIActivityDbHelper extends _i1.Mock implements _i2.IActivityDbHelper {
  @override
  _i3.Stream<void> get onCollectionChangedNotification => (super.noSuchMethod(
        Invocation.getter(#onCollectionChangedNotification),
        returnValue: _i3.Stream<void>.empty(),
        returnValueForMissingStub: _i3.Stream<void>.empty(),
      ) as _i3.Stream<void>);
  @override
  set onCollectionChangedNotification(
          _i3.Stream<void>? _onCollectionChangedNotification) =>
      super.noSuchMethod(
        Invocation.setter(
          #onCollectionChangedNotification,
          _onCollectionChangedNotification,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<int> add(_i4.Activity? item) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [item],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<List<_i4.Activity>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
      ) as _i3.Future<List<_i4.Activity>>);
  @override
  _i3.Future<List<_i4.Activity>> getForADay(
    int? year,
    int? month,
    int? day,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForADay,
          [
            year,
            month,
            day,
          ],
        ),
        returnValue: _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
      ) as _i3.Future<List<_i4.Activity>>);
  @override
  _i3.Future<List<_i4.Activity>> getForAMonth(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForAMonth,
          [
            year,
            month,
          ],
        ),
        returnValue: _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
      ) as _i3.Future<List<_i4.Activity>>);
  @override
  _i3.Future<List<_i4.Activity>> getForAServiceYear(String? serviceYear) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForAServiceYear,
          [serviceYear],
        ),
        returnValue: _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
      ) as _i3.Future<List<_i4.Activity>>);
  @override
  _i3.Future<List<_i4.Activity>> getLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #getLast,
          [limit],
        ),
        returnValue: _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Activity>>.value(<_i4.Activity>[]),
      ) as _i3.Future<List<_i4.Activity>>);
  @override
  _i3.Future<_i4.Activity?> getSingle(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getSingle,
          [id],
        ),
        returnValue: _i3.Future<_i4.Activity?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Activity?>.value(),
      ) as _i3.Future<_i4.Activity?>);
  @override
  _i3.Future<int> update(_i4.Activity? item) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [item],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
