// Mocks generated by Mockito 5.4.0 from annotations
// in mat2414/test/ui/detail/detail_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mat2414/src/data/models/activity/activity.dart' as _i5;
import 'package:mat2414/src/data/models/models.dart' as _i2;
import 'package:mat2414/src/domain/repositories/i_activity_repository.dart'
    as _i3;
import 'package:mat2414/src/domain/repositories/i_reports_repository.dart'
    as _i6;
import 'package:mat2414/src/domain/repositories/i_user_repository.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IActivitiesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIActivitiesRepository extends _i1.Mock
    implements _i3.IActivitiesRepository {
  @override
  _i4.Future<int> create(_i5.Activity? item) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [item],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<List<_i5.Activity>> getForADay(
    int? year,
    int? month,
    int? day,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForADay,
          [
            year,
            month,
            day,
          ],
        ),
        returnValue: _i4.Future<List<_i5.Activity>>.value(<_i5.Activity>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Activity>>.value(<_i5.Activity>[]),
      ) as _i4.Future<List<_i5.Activity>>);
  @override
  _i4.Future<List<_i5.Activity>> getForAMonth(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForAMonth,
          [
            year,
            month,
          ],
        ),
        returnValue: _i4.Future<List<_i5.Activity>>.value(<_i5.Activity>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Activity>>.value(<_i5.Activity>[]),
      ) as _i4.Future<List<_i5.Activity>>);
  @override
  _i4.Future<List<_i5.Activity>> getForAServiceYear(String? serviceYear) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForAServiceYear,
          [serviceYear],
        ),
        returnValue: _i4.Future<List<_i5.Activity>>.value(<_i5.Activity>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Activity>>.value(<_i5.Activity>[]),
      ) as _i4.Future<List<_i5.Activity>>);
  @override
  _i4.Stream<List<_i5.Activity>> watch3recent() => (super.noSuchMethod(
        Invocation.method(
          #watch3recent,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.Activity>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i5.Activity>>.empty(),
      ) as _i4.Stream<List<_i5.Activity>>);
  @override
  _i4.Future<List<_i5.Activity>> readAll() => (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Activity>>.value(<_i5.Activity>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Activity>>.value(<_i5.Activity>[]),
      ) as _i4.Future<List<_i5.Activity>>);
  @override
  _i4.Future<_i5.Activity?> readSingle(int? id) => (super.noSuchMethod(
        Invocation.method(
          #readSingle,
          [id],
        ),
        returnValue: _i4.Future<_i5.Activity?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.Activity?>.value(),
      ) as _i4.Future<_i5.Activity?>);
  @override
  _i4.Future<int> update(_i5.Activity? item) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [item],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> delete(int? itemId) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [itemId],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IReportsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIReportsRepository extends _i1.Mock
    implements _i6.IReportsRepository {
  @override
  _i4.Future<int> create(_i2.Report? item) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [item],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<_i2.Report?> readClosedForAMonth(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readClosedForAMonth,
          [
            year,
            month,
          ],
        ),
        returnValue: _i4.Future<_i2.Report?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.Report?>.value(),
      ) as _i4.Future<_i2.Report?>);
  @override
  _i4.Future<List<_i2.Report>> readForAYear(int? year) => (super.noSuchMethod(
        Invocation.method(
          #readForAYear,
          [year],
        ),
        returnValue: _i4.Future<List<_i2.Report>>.value(<_i2.Report>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Report>>.value(<_i2.Report>[]),
      ) as _i4.Future<List<_i2.Report>>);
  @override
  _i4.Future<_i2.Report?> readSingle(int? id) => (super.noSuchMethod(
        Invocation.method(
          #readSingle,
          [id],
        ),
        returnValue: _i4.Future<_i2.Report?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.Report?>.value(),
      ) as _i4.Future<_i2.Report?>);
  @override
  _i4.Future<int> update(_i2.Report? item) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [item],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> delete(int? itemId) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [itemId],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [IUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRepository extends _i1.Mock implements _i7.IUserRepository {
  @override
  _i2.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_0(
          this,
          Invocation.getter(#user),
        ),
        returnValueForMissingStub: _FakeUser_0(
          this,
          Invocation.getter(#user),
        ),
      ) as _i2.User);
  @override
  _i4.Future<void> update(_i2.User? user) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
